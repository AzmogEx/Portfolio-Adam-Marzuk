generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id           String   @id @default(cuid())
  title        String
  description  String
  image        String?
  technologies String
  githubUrl    String?
  liveUrl      String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Experience {
  id           String   @id @default(cuid())
  title        String
  company      String
  location     String
  startDate    String
  endDate      String?
  description  String
  technologies String
  type         String   @default("work")
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  category    String
  level       String
  icon        String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SoftSkill {
  id          String   @id @default(cuid())
  name        String
  category    String
  level       String
  icon        String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HeroContent {
  id           String   @id @default(cuid())
  greeting     String
  name         String
  title        String
  description  String
  location     String
  email        String
  profileImage String?
  ctaButton1   String
  ctaButton2   String
  scrollText   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AboutContent {
  id              String   @id @default(cuid())
  sectionTitle    String
  sectionSubtitle String
  parcourTitle    String
  parcourText1    String
  parcourText2    String
  skillsTitle     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FooterContent {
  id              String   @id @default(cuid())
  name            String
  description     String
  email           String
  githubUrl       String
  linkedinUrl     String
  copyrightText   String
  quickLinks      String   // JSON array des liens rapides
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  category    String   // 'language', 'framework', 'tool', 'other'
  level       String   // 'expert', 'advanced', 'intermediate', 'beginner'
  icon        String
  description String?
  order       Int      @default(0)
  type        String   @default("main") // 'main', 'workflow', 'soft'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactSettings {
  id                String   @id @default(cuid())
  successMessage    String
  errorMessage      String
  emailSubject      String
  emailTemplate     String   // Template HTML pour les emails
  autoReplyEnabled  Boolean  @default(false)
  autoReplySubject  String?
  autoReplyTemplate String?  // Template de réponse automatique
  adminEmail        String
  ccEmails          String?  // JSON array des emails en copie
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SeoSettings {
  id                String   @id @default(cuid())
  title             String
  description       String
  keywords          String   // JSON array des mots-clés
  ogTitle           String?
  ogDescription     String?
  ogImage           String?
  googleAnalyticsId String?
  structuredData    String?  // JSON-LD pour les données structurées
  robotsMeta        String   @default("index,follow")
  canonicalUrl      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AnalyticsSettings {
  id                    String   @id @default(cuid())
  enabled               Boolean  @default(true)
  trackPageViews        Boolean  @default(true)
  trackProjectClicks    Boolean  @default(true)
  trackContactForm      Boolean  @default(true)
  trackDownloads        Boolean  @default(true)
  customEvents          String?  // JSON array des événements personnalisés
  retentionDays         Int      @default(365) // Durée de conservation des données
  excludeAdminViews     Boolean  @default(true)
  heatmapEnabled        Boolean  @default(false)
  notificationEmail     String?  // Email pour les rapports
  weeklyReports         Boolean  @default(false)
  monthlyReports        Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model AnalyticsEvent {
  id            String   @id @default(cuid())
  eventType     String   // 'page_view', 'project_click', 'contact_form', 'download', 'custom'
  eventName     String?  // Nom spécifique pour les événements personnalisés
  page          String?  // Page où l'événement a eu lieu
  projectId     String?  // ID du projet cliqué (si applicable)
  userAgent     String?  // Navigateur de l'utilisateur
  ipAddress     String?  // IP de l'utilisateur (hashée pour la privacy)
  country       String?  // Pays dérivé de l'IP
  referrer      String?  // Page de provenance
  sessionId     String?  // ID de session utilisateur
  metadata      String?  // Données additionnelles (JSON)
  timestamp     DateTime @default(now())

  @@index([eventType, timestamp])
  @@index([page, timestamp])
  @@index([projectId, timestamp])
}

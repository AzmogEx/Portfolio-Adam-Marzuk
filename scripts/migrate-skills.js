const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

// Skills data from src/data/skills.ts
const skills = [
  // Main skills (technical)
  { name: 'JavaScript', category: 'language', level: 'advanced', icon: 'üü®', type: 'main' },
  { name: 'TypeScript', category: 'language', level: 'advanced', icon: 'üî∑', type: 'main' },
  { name: 'C#', category: 'language', level: 'expert', icon: '‚ö°', type: 'main' },
  { name: 'Python', category: 'language', level: 'intermediate', icon: 'üêç', type: 'main' },
  { name: 'Java', category: 'language', level: 'advanced', icon: '‚òï', type: 'main' },
  { name: 'PHP', category: 'language', level: 'intermediate', icon: 'üêò', type: 'main' },
  { name: 'C++', category: 'language', level: 'beginner', icon: '‚ö°', type: 'main' },

  // Frameworks & Libraries
  { name: 'React', category: 'framework', level: 'advanced', icon: '‚öõÔ∏è', type: 'main' },
  { name: 'Vue.js', category: 'framework', level: 'intermediate', icon: 'üíö', type: 'main' },
  { name: 'Node.js', category: 'framework', level: 'intermediate', icon: 'üü¢', type: 'main' },
  { name: 'Express.js', category: 'framework', level: 'intermediate', icon: 'üöÇ', type: 'main' },
  { name: 'Laravel', category: 'framework', level: 'intermediate', icon: 'üî¥', type: 'main' },
  { name: 'Spring Boot', category: 'framework', level: 'beginner', icon: 'üçÉ', type: 'main' },

  // Tools & Technologies
  { name: 'Git', category: 'tool', level: 'advanced', icon: 'üîÄ', type: 'main' },
  { name: 'Docker', category: 'tool', level: 'intermediate', icon: 'üê≥', type: 'main' },
  { name: 'MySQL', category: 'tool', level: 'intermediate', icon: 'üóÑÔ∏è', type: 'main' },
  { name: 'PostgreSQL', category: 'tool', level: 'intermediate', icon: 'üêò', type: 'main' },
  { name: 'MongoDB', category: 'tool', level: 'intermediate', icon: 'üçÉ', type: 'main' },
  { name: 'Figma', category: 'tool', level: 'intermediate', icon: 'üé®', type: 'main' },
  { name: 'Proxmox', category: 'tool', level: 'advanced', icon: 'üíª', type: 'main' },

  // Methodologies
  { name: 'Agile/Scrum', category: 'other', level: 'intermediate', icon: 'üîÑ', type: 'main' },
  { name: 'Kanban', category: 'other', level: 'intermediate', icon: 'üìã', type: 'main' },

  // Workflow tools
  { name: 'VS Code', category: 'tool', level: 'expert', icon: 'üíª', type: 'workflow' },
  { name: 'IntelliJ IDEA', category: 'tool', level: 'advanced', icon: 'üß†', type: 'workflow' },
  { name: 'PhpStorm', category: 'tool', level: 'intermediate', icon: '‚ö°', type: 'workflow' },
  { name: 'GitHub', category: 'tool', level: 'advanced', icon: 'üêô', type: 'workflow' },
  { name: 'GitLab', category: 'tool', level: 'intermediate', icon: 'ü¶ä', type: 'workflow' },
  { name: 'Slack', category: 'tool', level: 'advanced', icon: 'üí¨', type: 'workflow' },
  { name: 'Discord', category: 'tool', level: 'expert', icon: 'üéÆ', type: 'workflow' },
  { name: 'Trello', category: 'tool', level: 'advanced', icon: 'üìã', type: 'workflow' },
  { name: 'Notion', category: 'tool', level: 'intermediate', icon: 'üìù', type: 'workflow' },
  { name: 'Postman', category: 'tool', level: 'advanced', icon: 'üì¨', type: 'workflow' },
  { name: 'Jest', category: 'tool', level: 'intermediate', icon: 'üß™', type: 'workflow' },
  { name: 'Cypress', category: 'tool', level: 'beginner', icon: 'üå≤', type: 'workflow' },
  { name: 'GitHub Actions', category: 'tool', level: 'intermediate', icon: '‚öôÔ∏è', type: 'workflow' },
  { name: 'Vercel', category: 'tool', level: 'advanced', icon: 'üöÄ', type: 'workflow' },
  { name: 'Netlify', category: 'tool', level: 'intermediate', icon: 'üåê', type: 'workflow' },

  // Soft skills
  { name: 'Travail en √©quipe', category: 'other', level: 'expert', icon: 'üë•', type: 'soft' },
  { name: 'Communication', category: 'other', level: 'advanced', icon: 'üí¨', type: 'soft' },
  { name: 'Coh√©sion de groupe', category: 'other', level: 'advanced', icon: 'ü§ù', type: 'soft' },
  { name: 'Leadership', category: 'other', level: 'intermediate', icon: 'üë®‚Äçüíº', type: 'soft' },
  { name: 'Gestion de projet', category: 'other', level: 'advanced', icon: 'üìä', type: 'soft' },
  { name: 'Planification', category: 'other', level: 'advanced', icon: 'üìÖ', type: 'soft' },
  { name: 'R√©solution de probl√®mes', category: 'other', level: 'expert', icon: 'üîç', type: 'soft' },
  { name: 'Esprit critique', category: 'other', level: 'advanced', icon: 'üéØ', type: 'soft' },
  { name: 'Adaptabilit√©', category: 'other', level: 'expert', icon: 'üîÑ', type: 'soft' },
  { name: 'Apprentissage continu', category: 'other', level: 'expert', icon: 'üìö', type: 'soft' },
  { name: 'Veille technologique', category: 'other', level: 'advanced', icon: 'üî≠', type: 'soft' },
  { name: 'Cr√©ativit√©', category: 'other', level: 'advanced', icon: 'üí°', type: 'soft' }
]

async function migrateSkills() {
  try {
    console.log('üöÄ D√©but de la migration des comp√©tences...')

    // Check if skills already exist
    const existingSkills = await prisma.skill.count()
    if (existingSkills > 0) {
      console.log(`‚ö†Ô∏è  ${existingSkills} comp√©tences trouv√©es en base. Suppression...`)
      await prisma.skill.deleteMany()
    }

    console.log('üìù Insertion des nouvelles comp√©tences...')

    // Insert skills with order
    for (let i = 0; i < skills.length; i++) {
      const skill = skills[i]
      await prisma.skill.create({
        data: {
          ...skill,
          order: i + 1
        }
      })
      console.log(`‚úÖ ${skill.name} (${skill.type}) - ${skill.level}`)
    }

    const totalSkills = await prisma.skill.count()
    console.log(`\nüéâ Migration termin√©e ! ${totalSkills} comp√©tences import√©es.`)

    // Statistiques
    const stats = await prisma.skill.groupBy({
      by: ['type'],
      _count: { type: true }
    })

    console.log('\nüìä Statistiques:')
    stats.forEach(stat => {
      console.log(`  - ${stat.type}: ${stat._count.type} comp√©tences`)
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
  } finally {
    await prisma.$disconnect()
  }
}

migrateSkills()